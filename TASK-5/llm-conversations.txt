IoT tabanlı akıllı ev g¨uvenlik sisteminin alarm ve bildirim s¨ure¸clerini
modelleyecez sistem gereksinimleri olarak Sistem aktif mi kontrol¨u (ko¸sul)
Sens¨or okuma d¨ong¨us¨u (d¨ong¨u - s¨urekli)
Hareket sens¨or¨u kontrol¨u (ko¸sul)
Kapı/pencere sens¨or¨u kontrol¨u (ko¸sul)
Kamera aktivasyonu (ko¸sul)
Yanlı¸s alarm kontrol¨u (ev sahibi evde mi?) (ko¸sul)
Alarm seviyesi belirleme (1-d¨u¸s¨uk, 2-orta, 3-y¨uksek) (ko¸sul)
Bildirim g¨onderme (SMS + App + Email)
Bekle ve tekrar kontrol et (d¨ong¨u)
Alarm sıfırlama veya devam ettirme (ko¸sul dikkat edicez
Süper — hemen yapıyorum. Aşağıda üç parça var: kısa sistem açıklaması (5–6 satır), sistem gereksinimlerine uygun Türkçe pseudocode (senin istediğin anahtar kelimelerle: BASLA, BITIR, DONGU, EGER ... ISE) ve son olarak aynı akışı Graphviz DOT formatında akış diyagramı (tüm kontrol noktaları diamond ile gösterildi). İhtiyacın olursa DOT'u Graphviz ile (dot -Tpng dosya.dot -o diyagram.png) render edebilirsin.

Kısa sistem açıklaması

IoT tabanlı akıllı ev güvenlik sistemi, sürekli sensör okumaları yaparak hareket, kapı/pencere durumu ve kamera verilerini izler. Sistem aktif değilse hiçbir alarm işleme alınmaz. Şüpheli durumlarda yanlış alarm kontrolü (ör. ev sahibi evde mi?) ve alarm seviyesine göre (1-düşük, 2-orta, 3-yüksek) uygun bildirimler (SMS, uygulama, e-posta) gönderilir. Sistem bekle-yeniden kontrol döngüsü ile durumu doğrular; alarm sıfırlama veya devam ettirme kararları operatif kurallara göre alınır. Tüm kritik kontrol noktaları karar düğümlerinde (diamond) modellenmiştir.

Pseudocode (Türkçe, işlem işaretleri belirgin)
BASLA
  // Başlangıç
  SISTEM_BASLAT()
  
  DONGU SUREKLI    // Sensör okuma döngüsü - sürekli çalışır
    EGER SISTEM_AKTIF ISE
      // Sensörleri oku
      SENSOR_VERILERI <- SENSOR_OKU_TUMU()
      
      // Hareket sensörü kontrolü
      EGER SENSOR_VERILERI.hareket = TRUE ISE
        HAREKET_DETECTED <- TRUE
      ISE
        HAREKET_DETECTED <- FALSE
      BITIR
      
      // Kapı/pencere sensörü kontrolü
      EGER SENSOR_VERILERI.kapi_pencere = ACIK ISE
        KAPI_ACIK <- TRUE
      ISE
        KAPI_ACIK <- FALSE
      BITIR
      
      // Kamera aktivasyonu koşulu
      EGER HAREKET_DETECTED = TRUE VEYA KAPI_ACIK = TRUE ISE
        KAMERA_AKTIVE_ET()
      ISE
        KAMERA_STANDBY()
      BITIR
      
      // Yanlış alarm kontrolü (ör. ev sahibi evde mi?)
      EGER EVSAHIBI_EVDE_MU() = TRUE ISE
        YANLIS_ALARM_OLASILIGI <- YUKSEK
      ISE
        YANLIS_ALARM_OLASILIGI <- DUSUK
      BITIR
      
      // Alarm tetikleme mantığı ve seviye belirleme
      ALARM_TETIK <- FALSE
      ALARM_SEVIYE <- 0
      EGER HAREKET_DETECTED = TRUE VE KAPI_ACIK = TRUE ISE
        ALARM_TETIK <- TRUE
        ALARM_SEVIYE <- 3   // yüksek
      ISE EGER HAREKET_DETECTED = TRUE ISE
        ALARM_TETIK <- TRUE
        ALARM_SEVIYE <- 2   // orta
      ISE EGER KAPI_ACIK = TRUE ISE
        ALARM_TETIK <- TRUE
        ALARM_SEVIYE <- 2   // orta (örnek karar)
      ISE
        // duruma göre düşük seviye veya pasif
        ALARM_TETIK <- FALSE
      BITIR
      
      // Yanlış alarm filtresi uygula
      EGER ALARM_TETIK = TRUE VE YANLIS_ALARM_OLASILIGI = YUKSEK ISE
        // Ev sahibi evdeyse önce uyarı, otomatik tam alarm değil
        BILDIRIM_GONDER(tur = "Uyarı", kanal = ["App"])
        // Bekle ve tekrar kontrol et
        BEKLE(10 saniye)
        // tekrar sensör oku ve karar ver
        DEVAM_ET -> CONTINUE_CHECK
      ISE EGER ALARM_TETIK = TRUE ISE
        // Gerçek alarm - seviye bazlı bildirim
        BILDIRIM_GONDER(tur = "Alarm", kanal = ["SMS","App","Email"], seviye = ALARM_SEVIYE)
        // Kamera kaydı başlatıldıysa sakla/ilet
        KAMERA_KAYDI_SAKLA()
        // Bekle ve tekrar kontrol et (ör. 30 saniye aralıklarla)
        BEKLE(30 saniye)
        DEVAM_ET -> CONTINUE_CHECK
      BITIR
      
      CONTINUE_CHECK:
        // Re-check döngüsü: alarm devam ediyor mu? sıfırlama talebi var mı?
        SENSOR_VERILERI2 <- SENSOR_OKU_TUMU()
        EGER ALARM_TETIK = TRUE VE RESET_GIRISI_ALINMIS_MI() = TRUE ISE
          // Manuel veya otomatik sıfırlama
          ALARM_TETIK <- FALSE
          ALARM_SEVIYE <- 0
          BILDIRIM_GONDER(tur = "Alarm Sıfırlandı", kanal = ["App","Email"])
        ISE EGER YENI_TEHDIT_VAR(SENSOR_VERILERI2) ISE
          // Alarm devam ettir veya seviye güncelle
          ALARM_SEVIYE <- ALARM_SEVIYE_GUNCELLE(SENSOR_VERILERI2)
          BILDIRIM_GONDER(tur = "Alarm Güncellendi", kanal = ["SMS","App","Email"], seviye = ALARM_SEVIYE)
        ISE
          // Tehdit azaldıysa alarmı kademeli düşür veya pasifleştir
          EGER TEHDIT_AZALDI_MI(SENSOR_VERILERI2) ISE
            ALARM_SEVIYE <- MAKS(0, ALARM_SEVIYE - 1)
            EGER ALARM_SEVIYE = 0 ISE
              ALARM_TETIK <- FALSE
              BILDIRIM_GONDER(tur = "Alarm Sonlandı", kanal = ["App","Email"])
            BITIR
          BITIR
        BITIR
      
    ISE
      // Sistem pasifse uyku modu (düşük enerji) - kısa bekleme
      BEKLE(1 dakika)
    BITIR
  BITIR_DONGU
  
  SISTEM_DUR()  
BITIR
İstersen şimdi:

Bu DOT'u görsel haline getireyim (PNG/SVG) — istersen ben DOT'u sana direkt görsel olarak veremem ama Graphviz ile nasıl render edeceğini adım adım gösteririm.

Ya da bu pseudocode'u daha ayrıntılı bir state-machine (durum makinesi) veya sequence diagram (sıra diyagramı) haline çevirebilirim.

Hangi formatı daha çok istersin — doğrudan Graphviz PNG mi, yoksa state-machine tabanlı daha teknik model mi?“Akıllı ev g¨uvenlik sistemi 7/24 ¸calı¸sır. Ana d¨ong¨u i¸cinde sens¨or okuma,
tehdit algılama, alarm verme ve bildirim g¨onderme s¨ure¸clerini i¸ceren
pseudocode yaz.” Ozel Notlar: ¨
Ana DONG ¨ U s¨urekli ¸calı¸sır (DO ¨ GRU ko¸sulu ile) ˘
Her d¨ong¨u iterasyonunda t¨um sens¨orler kontrol edilir
Tehdit seviyesine g¨ore farklı aksiyonlar alınır
Alarm sıfırlama komutu gelene kadar devam eder
 Harika, o özel notlara tamamen uygun olacak şekilde aşağıda tam ve düzenli Türkçe pseudocode hazırladım 👇

Bu sürüm, sürekli çalışan ana döngü (DONGU DOGRU), sensör kontrolü, tehdit algılama, alarm verme, bildirim gönderme, ve alarm sıfırlama komutu bölümlerini adım adım içeriyor.

🔹 Akıllı Ev Güvenlik Sistemi Pseudocode
BASLA
  SISTEM_BASLAT()
  ALARM_DURUMU <- "KAPALI"
  ALARM_SEVIYESI <- 0
  
  DONGU DOGRU    // Ana döngü 7/24 çalışır
    // 1. Tüm sensörleri oku
    SENSOR_VERILERI <- SENSOR_OKU_TUMU()
    
    // 2. Tehdit tespiti
    HAREKET_VAR_MI <- SENSOR_VERILERI.hareket
    KAPI_ACIK_MI <- SENSOR_VERILERI.kapi
    PENCERE_ACIK_MI <- SENSOR_VERILERI.pencere
    CAM_KIRILDI_MI <- SENSOR_VERILERI.cam
    
    // 3. Tehdit seviyesini belirle
    EGER HAREKET_VAR_MI VEYA KAPI_ACIK_MI VEYA PENCERE_ACIK_MI VEYA CAM_KIRILDI_MI ISE
        // Farklı sensör kombinasyonlarına göre seviye belirleme
        EGER CAM_KIRILDI_MI ISE
            ALARM_SEVIYESI <- 3      // Yüksek tehdit
        ISE EGER HAREKET_VAR_MI VE KAPI_ACIK_MI ISE
            ALARM_SEVIYESI <- 2      // Orta tehdit
        ISE
            ALARM_SEVIYESI <- 1      // Düşük tehdit
        BITIR
        ALARM_DURUMU <- "AKTIF"
    ISE
        ALARM_DURUMU <- "KAPALI"
        ALARM_SEVIYESI <- 0
    BITIR
    
    // 4. Alarm verme ve bildirim gönderme
    EGER ALARM_DURUMU = "AKTIF" ISE
        KAMERA_AKTIVE_ET()
        SIREN_CALISTIR()
        
        // Tehdit seviyesine göre farklı bildirim türleri
        EGER ALARM_SEVIYESI = 1 ISE
            BILDIRIM_GONDER("Düşük Tehdit: Sistem küçük bir hareket algıladı.", ["App"])
        ISE EGER ALARM_SEVIYESI = 2 ISE
            BILDIRIM_GONDER("Orta Seviye Alarm: Kapı/Pencere hareketi algılandı.", ["SMS", "App"])
        ISE EGER ALARM_SEVIYESI = 3 ISE
            BILDIRIM_GONDER("YÜKSEK SEVİYE ALARM: Cam kırılması veya izinsiz giriş!", ["SMS", "App", "Email"])
        BITIR
    BITIR
    
    // 5. Alarm sıfırlama kontrolü
    EGER ALARM_DURUMU = "AKTIF" ISE
        EGER SIFIRLAMA_KOMUTU_GELDI_MI() = TRUE ISE
            ALARM_DURUMU <- "KAPALI"
            ALARM_SEVIYESI <- 0
            SIREN_DURDUR()
            KAMERA_DURDUR()
            BILDIRIM_GONDER("Alarm sıfırlandı. Sistem normale döndü.", ["App", "Email"])
        BITIR
    BITIR
    
    // 6. Kısa bekleme (örnek: 2 saniye)
    BEKLE(2 saniye)
    
  BITIR_DONGU

BITIR
🧠 Açıklamalar

Ana DONGU DOGRU: sistemin 7/24 çalışmasını sağlar.

Her turda tüm sensörler (hareket, kapı, pencere, cam) okunur.

Tehdit durumu ve alarm seviyesi (1–3) sensör kombinasyonlarına göre belirlenir.

Alarm aktifken kamera ve siren devreye girer, seviye bazlı bildirim gönderilir.

Alarm sıfırlama komutu (örneğin kullanıcı uygulamadan “Alarmı Durdur” basarsa) geldiğinde sistem sıfırlanır ve normale döner.

Sistem kısa bir bekleme süresinden sonra tekrar sensör okumaya devam eder.

İstersen bu pseudocode’u bir sonraki adımda Graphviz DOT akış diyagramına da çevirebilirim (her koşul “diamond”, işlemler “box” şeklinde).
Yapayım mı?
yap ama DOT dilinde sonsuz d¨ong¨uy¨u g¨ostermek i¸cin geri ok kullanın ve ”S¨urekli”
etiketi ekleyin.
Harika 💯
Aşağıda verdiğin özel notlara tam uygun şekilde hazırlanmış Graphviz DOT diliyle akış diyagramı var:

Ana döngü sonsuz (geri okla) gösteriliyor.

Geri dönüş okunda "Sürekli" etiketi var.

Tüm koşullar diamond (baklava), işlemler ise box biçiminde.

Alarm seviyesi ve sıfırlama süreci dahil.

🔹 Graphviz DOT Kodu (Akıllı Ev Güvenlik Sistemi)
digraph SmartHomeSecurity {
  rankdir=TB;
  node [shape=box, style=rounded, fontsize=12];

  start [label="BAŞLA"];
  init [label="SISTEM_BASLAT()\nALARM_DURUMU <- 'KAPALI'"];
  loopStart [label="Ana Döngü Başlangıcı"];
  readSensors [label="TÜM SENSÖRLERİ OKU\n(Hareket, Kapı, Pencere, Cam)"];
  threatCheck [label="Herhangi bir tehdit var mı?", shape=diamond];
  
  levelHigh [label="Cam kırıldı → Seviye 3 (Yüksek)"];
  levelMed [label="Hareket + Kapı Açık → Seviye 2 (Orta)"];
  levelLow [label="Tek sensör aktif → Seviye 1 (Düşük)"];
  noThreat [label="Tehdit yok → Alarm Kapalı\nSeviye 0"];

  alarmActive [label="ALARM AKTİF Mİ?", shape=diamond];
  activate [label="KAMERA_AKTIVE_ET()\nSIREN_CALISTIR()"];

  notifLow [label="BİLDİRİM: Düşük Tehdit\n(App)"];
  notifMed [label="BİLDİRİM: Orta Tehdit\n(SMS + App)"];
  notifHigh [label="BİLDİRİM: YÜKSEK TEHDİT\n(SMS + App + Email)"];

  resetCheck [label="Sıfırlama komutu geldi mi?", shape=diamond];
  resetYes [label="ALARM SIFIRLANDI\nKAMERA_DURDUR()\nSIREN_DURDUR()\nBİLDİRİM: 'Alarm sıfırlandı'"];
  
  waitNode [label="BEKLE (2 saniye)"];
  
  end [label="BITIR", shape=oval];

  // --- Akışlar ---
  start -> init -> loopStart -> readSensors;
  readSensors -> threatCheck;

  threatCheck -> levelHigh [label="Cam kırıldı"];
  threatCheck -> levelMed [label="Hareket + Kapı"];
  threatCheck -> levelLow [label="Tek sensör"];
  threatCheck -> noThreat [label="Hayır"];

  levelHigh -> activate;
  levelMed -> activate;
  levelLow -> activate;
  noThreat -> waitNode;

  activate -> alarmActive;
  alarmActive -> notifLow [label="Seviye 1"];
  alarmActive -> notifMed [label="Seviye 2"];
  alarmActive -> notifHigh [label="Seviye 3"];

  notifLow -> resetCheck;
  notifMed -> resetCheck;
  notifHigh -> resetCheck;

  resetCheck -> resetYes [label="Evet"];
  resetCheck -> waitNode [label="Hayır"];

  resetYes -> waitNode;

  waitNode -> readSensors [label="Sürekli", color=blue, fontcolor=blue]; // Sonsuz döngü oku

  // Opsiyonel durdurma çıkışı (manuel kapatma vb.)
  loopStart -> end [label="Sistem kapatıldıysa", style=dashed, color=gray];
}
🧠 Açıklamalar

Sonsuz döngü:
waitNode -> readSensors [label="Sürekli"] oku, sistemin 7/24 çalıştığını gösterir.

Her koşul (ör. tehdit var mı?, sıfırlama komutu geldi mi?) diamond ile çizilir.

Bildirimler ve eylemler (kamera, siren, sıfırlama) kutu şeklinde (box).

Sistem kapatma durumu isteğe bağlı olarak gri kesikli çizgiyle gösterildi.

İstersen bu diyagramı görsel haline getirebilmen için şu komutu çalıştırabilirsin 👇
dot -Tpng SmartHomeSecurity.dot -o SmartHomeSecurity.png
dot -Tpng SmartHomeSecurity.dot -o SmartHomeSecurity.png


